{"version":3,"file":"static/js/117.b6b987d6.chunk.js","mappings":"oNAIMA,EAAe,SAACC,GAIpB,MADW,mEACDC,KAAKD,IAAyB,IAAhBA,EAAKE,MAC9B,EAEKC,EAAW,CACf,KACA,QACA,OACA,iDACA,sCACA,YACA,UACA,oBACA,kDACA,iBACA,qBACA,OACA,QACA,gCACA,UAqBIC,EAAY,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YAInB,GAA0BC,EAAAA,EAAAA,UAAS,GAAnC,eAAOC,EAAP,KAAYC,EAAZ,KACA,GAAiCF,EAAAA,EAAAA,UAASH,EAASI,IAAnD,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA2BJ,EAAAA,EAAAA,UAAS,GAApC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAAgCN,EAAAA,EAAAA,WAAS,GAAzC,eAAOO,EAAP,KAAiBC,EAAjB,KA0BA,OAnDkB,SAACC,EAAUC,GAC7B,IAAMC,GAAgBC,EAAAA,EAAAA,WAEtBC,EAAAA,EAAAA,YAAU,WACRF,EAAcG,QAAUL,CACzB,GAAE,CAACA,KAEJI,EAAAA,EAAAA,YAAU,WACR,GAAIH,EAAO,CACT,IAAMK,EAAKC,aAAY,WACrBL,EAAcG,SACf,GAAEJ,GACH,OAAO,kBAAMO,cAAcF,EAApB,CACR,CACD,OAAO,WAAQ,CAChB,GAAE,CAACL,GACL,CAWCQ,EACE,WACE,IAAIC,EAASlB,EACTmB,EAAUf,EACVA,EAZK,IAYUR,EAASI,GAAKL,SAC/BuB,GAAU,EACVC,EAAU,GAERD,IAAWtB,EAASD,OAClBG,GACFG,EAAW,GACXI,EAAW,IAEXE,GAAY,IAGdJ,EAAcP,EAASsB,GAAQE,MAAM,EAAGD,IACxClB,EAAWiB,GACXb,EAAWc,EAAU,GAExB,GACDb,EA5BY,GA4BO,OAInB,gBACEe,UAAU,mBACVC,MAAO9B,EAAaU,GAAW,CAAC,EAAI,CAAEqB,MAAO,OAC7CC,aAAc,kBAAMjB,GAAY,EAAlB,EACdkB,aAAc,kBAAMzB,EAAMJ,EAASD,QAAUY,GAAY,EAA3C,EAJhB,UAME,eACEmB,OAAO,SACPC,KAAMnC,EAAaU,GAAb,qCAA+D,GAFvE,WAIE,0BAAOA,KACP,qDAIP,EAEDL,EAAU+B,aAAe,CACvB9B,aAAa,GAOf,Q,UC7EA,EAtBgB,kBACd,SAAC+B,EAAA,EAAD,CACEC,MAAM,UACNC,YAAY,iEAFd,UAIE,qBAASV,UAAU,OAAOP,GAAG,UAA7B,WACE,6BACE,gBAAKO,UAAU,QAAf,UACE,eAAI,cAAY,UAAhB,UACE,SAAC,KAAD,CAAMW,GAAG,WAAT,4BAIN,iBAAKX,UAAU,WAAf,WACE,6EACA,SAAC,EAAD,QAEF,SAACY,EAAA,EAAD,QAjBU,C","sources":["components/Contact/EmailLink.js","pages/Contact.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n\n// Validates the first half of an email address.\nconst validateText = (text) => {\n  // NOTE: Passes RFC 5322 but not tested on google's standard.\n  // eslint-disable-next-line no-useless-escape\n  const re = /^(([^<>()\\[\\]\\.,;:\\s@\\\"]+(\\.[^<>()\\[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))$/;\n  return re.test(text) || text.length === 0;\n};\n\nconst messages = [\n  \"hi\",\n  \"hello\",\n  \"hola\",\n  \"you-can-email-me-at-literally-anything! Really\",\n  \"well, not anything. But most things\",\n  \"like-this\",\n  \"or-this\",\n  \"but not this :(  \",\n  \"you.can.also.email.me.with.specific.topics.like\",\n  \"just-saying-hi\",\n  \"please-work-for-us\",\n  \"help\",\n  \"admin\",\n  \"or-I-really-like-your-website\",\n  \"thanks\",\n];\n\nconst useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    if (delay) {\n      const id = setInterval(() => {\n        savedCallback.current();\n      }, delay);\n      return () => clearInterval(id);\n    }\n    return () => {}; // pass linter\n  }, [delay]);\n};\n\nconst EmailLink = ({ loopMessage }) => {\n  const hold = 50; // ticks to wait after message is complete before rendering next message\n  const delay = 50; // tick length in mS\n\n  const [idx, updateIter] = useState(0); // points to current message\n  const [message, updateMessage] = useState(messages[idx]);\n  const [char, updateChar] = useState(0); // points to current char\n  const [isActive, setIsActive] = useState(true); // disable when all messages are printed\n\n  useInterval(\n    () => {\n      let newIdx = idx;\n      let newChar = char;\n      if (char - hold >= messages[idx].length) {\n        newIdx += 1;\n        newChar = 0;\n      }\n      if (newIdx === messages.length) {\n        if (loopMessage) {\n          updateIter(0);\n          updateChar(0);\n        } else {\n          setIsActive(false);\n        }\n      } else {\n        updateMessage(messages[newIdx].slice(0, newChar));\n        updateIter(newIdx);\n        updateChar(newChar + 1);\n      }\n    },\n    isActive ? delay : null\n  );\n\n  return (\n    <div\n      className=\"inline-container\"\n      style={validateText(message) ? {} : { color: \"red\" }}\n      onMouseEnter={() => setIsActive(false)}\n      onMouseLeave={() => idx < messages.length && setIsActive(true)}\n    >\n      <a\n        target=\"_blank\"\n        href={validateText(message) ? `mailto:nishantpandey2106@gmail.com` : \"\"}\n      >\n        <span>{message}</span>\n        <span>@nishantpandey.com</span>\n      </a>\n    </div>\n  );\n};\n\nEmailLink.defaultProps = {\n  loopMessage: false,\n};\n\nEmailLink.propTypes = {\n  loopMessage: PropTypes.bool,\n};\n\nexport default EmailLink;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Main from \"../layouts/Main\";\nimport EmailLink from \"../components/Contact/EmailLink\";\nimport ContactIcons from \"../components/Contact/ContactIcons\";\n\nconst Contact = () => (\n  <Main\n    title=\"Contact\"\n    description=\"Contact Nishant Pandey via email @ nishantpandey2106@gmail.com\"\n  >\n    <article className=\"post\" id=\"contact\">\n      <header>\n        <div className=\"title\">\n          <h2 data-testid=\"heading\">\n            <Link to=\"/contact\">Contact</Link>\n          </h2>\n        </div>\n      </header>\n      <div className=\"email-at\">\n        <p>Feel free to get in touch. You can email me at: </p>\n        <EmailLink />\n      </div>\n      <ContactIcons />\n    </article>\n  </Main>\n);\n\nexport default Contact;\n"],"names":["validateText","text","test","length","messages","EmailLink","loopMessage","useState","idx","updateIter","message","updateMessage","char","updateChar","isActive","setIsActive","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","newIdx","newChar","slice","className","style","color","onMouseEnter","onMouseLeave","target","href","defaultProps","Main","title","description","to","ContactIcons"],"sourceRoot":""}